<?php
	/**
	 * @file
	 * Module file for miniOrange sso Module.
	 */
	
	/**
	 * Implements hook_menu().
	 */
	function gluu_sso_menu()
	{
		
		
		$items['admin/config/people/gluu_sso'] = array(
			'title' => 'OpenID Connect',
			'description' => 'This module will enable you to authenticate users against any standard OpenID Provider (OP).',
			'page callback' => 'drupal_get_form',
			'page arguments' => array('gluu_sso_general_setup'),
			'access arguments' => array('administer site configuration'),
			'file' => 'gluu_sso_general_setup.inc',
		);
		
		$items['admin/config/people/gluu_sso/general'] = array(
			'type' => MENU_VISIBLE_IN_BREADCRUMB,
			'access arguments' => array('administer site configuration'),
			'page arguments' => array('gluu_sso_general_setup'),
			'file' => 'gluu_sso_general_setup.inc',
		);
		$items['admin/config/people/gluu_sso/generaledit'] = array(
			'type' => MENU_VISIBLE_IN_BREADCRUMB,
			'access arguments' => array('administer site configuration'),
			'page arguments' => array('gluu_sso_generaledit_setup'),
			'file' => 'gluu_sso_generaledit_setup.inc',
		);
		
		$items['admin/config/people/gluu_sso/openidconnect'] = array(
			'type' => MENU_VISIBLE_IN_BREADCRUMB,
			'access arguments' => array('administer site configuration'),
			'page arguments' => array('gluu_sso_openidconnect_setup'),
			'file' => 'gluu_sso_openidconnect_setup.inc',
		);
		$items['admin/config/people/gluu_sso/savedata'] = array(
			'type' => MENU_VISIBLE_IN_BREADCRUMB,
			'access arguments' => array('administer site configuration'),
			'page arguments' => array('gluu_sso_openidconnect_setup'),
			'file' => 'gluu_sso_workflow.inc',
		);
		
		return $items;
	}
	
	/**
	 * Implements hook_user_login_block_alter().
	 */
	function gluu_sso_form_user_login_block_alter(&$form, &$form_state)
	{
		@session_start();
		
		if (isset($_REQUEST['gluuOption']) and strpos($_REQUEST['gluuOption'], 'oxdOpenId') !== false) {
			gluu_sso_login_validate($form, $form_state);
			
			return;
		}
		$form['markup_1'] = array(
			'#markup' => gluu_sso_login_html(),
		);
		
		return $form;
	}
	
	/**
	 * Implements hook_user_login_validate().
	 */
	function gluu_sso_login_validate($form, &$form_state)
	{
		@session_start();
		$base_url = gluu_sso_getbaseurl();
		if (isset($_REQUEST['gluuOption']) and strpos($_REQUEST['gluuOption'], 'oxdOpenId') !== false) {
			@session_destroy();
			drupal_flush_all_caches();
			if (isset($_REQUEST['error']) and strpos($_REQUEST['error'], 'session_selection_required') !== false) {
				header("Location: " . gluu_sso_login_url_prompt('login'));
				exit;
			}
			$oxd_id = variable_get('gluu_oxd_id');
			$gluu_user_role = variable_get('gluu_user_role');
			$get_tokens_by_code = new Gluu_sso_get_tokens_by_code();
			$get_tokens_by_code->setRequestOxdId($oxd_id);
			$get_tokens_by_code->setRequestCode($_REQUEST['code']);
			$get_tokens_by_code->setRequestState($_REQUEST['state']);
			$get_tokens_by_code->request();
			$get_tokens_by_code_array = array();
			if (!empty($get_tokens_by_code->getResponseAccessToken())) {
				$get_tokens_by_code_array = $get_tokens_by_code->getResponseObject()->data->id_token_claims;
			} else {
				echo "<script type='application/javascript'>
					alert('Missing claims : Please talk to your organizational system administrator or try again.');
					window.location.href='" . $base_url . "';
				 </script>";
				exit;
			}
			
			$get_user_info = new Gluu_sso_get_user_info();
			$get_user_info->setRequestOxdId($oxd_id);
			$get_user_info->setRequestAccessToken($get_tokens_by_code->getResponseAccessToken());
			$get_user_info->request();
			$get_user_info_array = $get_user_info->getResponseObject()->data->claims;
			$_SESSION['session_in_op'] = $get_tokens_by_code->getResponseIdTokenClaims()->exp[0];
			$_SESSION['user_oxd_id_token'] = $get_tokens_by_code->getResponseIdToken();
			$_SESSION['user_oxd_access_token'] = $get_tokens_by_code->getResponseAccessToken();
			$_SESSION['session_states'] = $_REQUEST['session_state'];
			$_SESSION['state'] = $_REQUEST['state'];
			$get_user_info_array = $get_user_info->getResponseObject()->data->claims;
			$reg_email = '';
			$reg_user_permission = '';
			if (!empty($get_user_info_array->email[0])) {
				$reg_email = $get_user_info_array->email[0];
			} elseif (!empty($get_tokens_by_code_array->email[0])) {
				$reg_email = $get_tokens_by_code_array->email[0];
			} else {
				echo "<script type='application/javascript'>
					alert('Missing claim : (email). Please talk to your organizational system administrator.');
					window.location.href='" . $base_url . "';
				 </script>";
				exit;
			}
			if (!empty($get_user_info_array->user_name[0])) {
				$username = $get_user_info_array->user_name[0];
			} else {
				$username = $reg_email;
			}
			if (!empty($get_user_info_array->permission[0])) {
				$world = str_replace("[", "", $get_user_info_array->permission[0]);
				$reg_user_permission = str_replace("]", "", $world);
			} elseif (!empty($get_tokens_by_code_array->permission[0])) {
				$world = str_replace("[", "", $get_user_info_array->permission[0]);
				$reg_user_permission = str_replace("]", "", $world);
			}
			
			if ($reg_email) {
				$data = array();
				foreach ($get_user_info->getResponseObject()->data->claims as $key => $value) {
					if ($value) {
						$data['field_' . $key] = array(LANGUAGE_NONE => array(array('value' => $value)));
					}
				}
				$account = user_load_by_mail($reg_email);
				if (!$account) {
					$bool = true;
					$gluu_new_roles = variable_get('gluu_new_role');
					$gluu_users_can_register = variable_get('gluu_users_can_register');
					if ($gluu_users_can_register == 2 and !empty($gluu_new_roles)) {
						if (!in_array($reg_user_permission, $gluu_new_roles)) {
							$bool = false;
						} else {
							$bool = true;
						}
					}
					if (!$bool or $gluu_users_can_register == 3) {
						echo "<script type='application/javascript'>
					alert('You are not authorized for an account on this application. If you think this is an error, please contact your OpenID Connect Provider (OP) admin.');
					window.location.href='" . gluu_sso_doing_logout($get_tokens_by_code->getResponseIdToken(), $_REQUEST['session_state'], $_REQUEST['state']) . "';
				 </script>";
						exit;
					}
					
					$userinfo = array(
						'name' => $username,
						'pass' => user_password(),
						'mail' => $reg_email,
						'init' => $reg_email,
						'status' => 1,
						'access' => REQUEST_TIME,
						$data
					
					);
					if ($gluu_user_role == 3) {
						$userinfo['roles'] = array(
							DRUPAL_AUTHENTICATED_RID => 'authenticated user',
							3 => 'custom role',
						);
					}
					
					$new_account = user_save(drupal_anonymous_user(), $userinfo);
					
					
					if (!$new_account) {
						echo "<script type='application/javascript'>
					alert('Error saving user account.');
					window.location.href='" . $base_url . "';
				 </script>";
						exit;
					}
					$form_state['uid'] = $new_account->uid;
				} else {
					if (!empty($data)) {
						$account->data = $data;
						user_save((object)array('uid' => $account->uid), (array)$account);
					}
					$form_state['uid'] = $account->uid;
				}
				
				user_login_submit(array(), $form_state);
				drupal_goto($base_url);
				
				return;
				
			} else {
				echo "<script type='application/javascript'>
					alert('Missing claim : (email). Please talk to your organizational system administrator.');
					window.location.href='" . $base_url . "';
				 </script>";
				exit;
			}
		}
	}
	
	/**
	 * Implements hook_user_user_logout().
	 */
	function gluu_sso_user_logout($account)
	{
		@session_start();
		$base_url = gluu_sso_getbaseurl();
		if (isset($_SESSION['session_in_op'])) {
			if (time() < (int)$_SESSION['session_in_op']) {
				
				$gluu_provider = variable_get('gluu_provider');
				$arrContextOptions = array(
					"ssl" => array(
						"verify_peer" => false,
						"verify_peer_name" => false,
					),
				);
				$json = file_get_contents($gluu_provider . '/.well-known/openid-configuration', false, stream_context_create($arrContextOptions));
				$obj = json_decode($json);
				
				$oxd_id = variable_get('gluu_oxd_id');
				$gluu_config = variable_get('gluu_config');
				if (!empty($obj->end_session_endpoint) or $gluu_provider == 'https://accounts.google.com') {
					if (!empty($_SESSION['user_oxd_id_token'])) {
						if ($oxd_id && $_SESSION['user_oxd_id_token'] && $_SESSION['session_in_op']) {
							$logout = new Gluu_sso_logout();
							$logout->setRequestOxdId($oxd_id);
							$logout->setRequestIdToken($_SESSION['user_oxd_id_token']);
							$logout->setRequestPostLogoutRedirectUri($gluu_config['post_logout_redirect_uri']);
							$logout->setRequestSessionState($_SESSION['session_states']);
							$logout->setRequestState($_SESSION['state']);
							$logout->request();
							unset($_SESSION['user_oxd_access_token']);
							unset($_SESSION['user_oxd_id_token']);
							unset($_SESSION['session_states']);
							unset($_SESSION['state']);
							unset($_SESSION['session_in_op']);
							@session_destroy();
							drupal_flush_all_caches();
							header('Location: ' . $logout->getResponseObject()->data->uri);
							exit;
						}
					}
				} else {
					unset($_SESSION['user_oxd_access_token']);
					unset($_SESSION['user_oxd_id_token']);
					unset($_SESSION['session_states']);
					unset($_SESSION['state']);
					unset($_SESSION['session_in_op']);
					@session_destroy();
					drupal_flush_all_caches();
					
				}
			}
		}
		unset($_SESSION['user_oxd_access_token']);
		unset($_SESSION['user_oxd_id_token']);
		unset($_SESSION['session_states']);
		unset($_SESSION['state']);
		unset($_SESSION['session_in_op']);
		@session_destroy();
		drupal_flush_all_caches();
		$gluu_custom_logout = variable_get('gluu_custom_logout');
		if (!empty($gluu_custom_logout)) {
			drupal_goto($gluu_custom_logout);
			exit;
		} else {
			drupal_goto($base_url);
			exit;
		}
	}
	
	/**
	 * Implements hook_init().
	 */
	function gluu_sso_init()
	{
		drupal_static(__FUNCTION__, false);
		@session_start();
		$base_url = gluu_sso_getbaseurl();
		if (isset($_REQUEST['option']) and strpos($_REQUEST['option'], 'allLogout') !== false) {
			if (isset($_SESSION['session_in_op'])) {
				if (time() < (int)$_SESSION['session_in_op']) {
					
					$gluu_provider = variable_get('gluu_provider');
					$arrContextOptions = array(
						"ssl" => array(
							"verify_peer" => false,
							"verify_peer_name" => false,
						),
					);
					$json = file_get_contents($gluu_provider . '/.well-known/openid-configuration', false, stream_context_create($arrContextOptions));
					$obj = json_decode($json);
					
					$oxd_id = variable_get('gluu_oxd_id');
					$gluu_config = variable_get('gluu_config');
					if (!empty($obj->end_session_endpoint) or $gluu_provider == 'https://accounts.google.com') {
						if (!empty($_SESSION['user_oxd_id_token'])) {
							if ($oxd_id && $_SESSION['user_oxd_id_token'] && $_SESSION['session_in_op']) {
								$logout = new Gluu_sso_logout();
								$logout->setRequestOxdId($oxd_id);
								$logout->setRequestIdToken($_SESSION['user_oxd_id_token']);
								$logout->setRequestPostLogoutRedirectUri($gluu_config['post_logout_redirect_uri']);
								$logout->setRequestSessionState($_SESSION['session_states']);
								$logout->setRequestState($_SESSION['state']);
								$logout->request();
								unset($_SESSION['user_oxd_access_token']);
								unset($_SESSION['user_oxd_id_token']);
								unset($_SESSION['session_states']);
								unset($_SESSION['state']);
								unset($_SESSION['session_in_op']);
								@session_destroy();
								drupal_flush_all_caches();
								header('Location: ' . $logout->getResponseObject()->data->uri);
								exit;
							}
						}
					} else {
						unset($_SESSION['user_oxd_access_token']);
						unset($_SESSION['user_oxd_id_token']);
						unset($_SESSION['session_states']);
						unset($_SESSION['state']);
						unset($_SESSION['session_in_op']);
						@session_destroy();
						drupal_flush_all_caches();
						
					}
				}
			}
			unset($_SESSION['user_oxd_access_token']);
			unset($_SESSION['user_oxd_id_token']);
			unset($_SESSION['session_states']);
			unset($_SESSION['state']);
			unset($_SESSION['session_in_op']);
			@session_destroy();
			drupal_flush_all_caches();
			$gluu_custom_logout = variable_get('gluu_custom_logout');
			if (!empty($gluu_custom_logout)) {
				drupal_goto($gluu_custom_logout);
				exit;
			} else {
				drupal_goto($base_url);
				exit;
			}
		}
		
	}
	
	/**
	 * Generate login page html;
	 */
	function gluu_sso_login_html()
	{
		$gluu_oxd_id = variable_get('gluu_oxd_id');
		$gluu_send_user_check = variable_get('gluu_send_user_check');
		$html = '';
		if (gluu_sso_is_port_working_module()) {
			if ($gluu_send_user_check && $gluu_oxd_id) {
				header("Location: " . gluu_sso_login_url());
				exit;
			} else if (!$gluu_send_user_check && $gluu_oxd_id) {
				$html .= '<script type="application/javascript">
        function deleteAllCookies() {
            var cookies = document.cookie.split(";");
        
            for (var i = 0; i < cookies.length; i++) {
                var cookie = cookies[i];
                var eqPos = cookie.indexOf("=");
                var name = eqPos > -1 ? cookie.substr(0, eqPos) : cookie;
                document.cookie = name + "=;expires=Thu, 01 Jan 1970 00:00:00 GMT";
            }
        }
		jQuery( document ).ready(function() {
		deleteAllCookies();
			jQuery(\'#user-login-form\').before( "<p><input type=\'radio\' name=\'radio\' id=\'OpenID\' value=\'Yes\' /> Login by OpenID Provider </p>" +
				"<p><input type=\'radio\' name=\'radio\' id=\'base\' value=\'No\' /> Show login form </p>" );
			jQuery(\'#user-login-form\').before(\'<a href="' . gluu_sso_login_url() . '" style="padding: 5px !important; " class="form-submit button button-primary button-large" id="gluu_login">Login by OpenID Provider</a>\');
			jQuery(\'#user-login-form\').hide();
			jQuery(\'input:radio[name="radio"]\').change(
				function(){
					if (jQuery(this).is(\':checked\') && jQuery(this).val() == \'Yes\') {
						jQuery(\'#gluu_login\').show();
						jQuery(\'#user-login-form\').hide();
					}else{
						jQuery(\'#gluu_login\').hide();
						jQuery(\'#user-login-form\').show();
					}
				});
			jQuery(\'#OpenID\').attr(\'checked\', true);

		});
	</script>';
			}
		}
		
		return $html;
	}
	
	/**
	 * Getting authorization url for gluu_sso module;
	 */
	function gluu_sso_login_url()
	{
		
		$gluu_config = variable_get('gluu_config');
		$gluu_auth_type = variable_get('gluu_auth_type');
		$oxd_id = variable_get('gluu_oxd_id');
		
		$get_authorization_url = new Gluu_sso_get_authorization_url();
		$get_authorization_url->setRequestOxdId($oxd_id);
		$get_authorization_url->setRequestScope($gluu_config['config_scopes']);
		if ($gluu_auth_type != "default") {
			$get_authorization_url->setRequestAcrValues([$gluu_auth_type]);
		} else {
			$get_authorization_url->setRequestAcrValues(null);
		}
		$get_authorization_url->request();
		
		return $get_authorization_url->getResponseAuthorizationUrl();
	}
	
	/**
	 * Getting authorization url with prompt for gluu_sso module;
	 */
	function gluu_sso_login_url_prompt($prompt)
	{
		$gluu_config = variable_get('gluu_config');
		$gluu_auth_type = variable_get('gluu_auth_type');
		$oxd_id = variable_get('gluu_oxd_id');
		
		$get_authorization_url = new Gluu_sso_get_authorization_url();
		$get_authorization_url->setRequestOxdId($oxd_id);
		
		
		$get_authorization_url->setRequestScope($gluu_config['config_scopes']);
		if ($gluu_auth_type != "default") {
			$get_authorization_url->setRequestAcrValues([$gluu_auth_type]);
		} else {
			$get_authorization_url->setRequestAcrValues(null);
		}
		
		
		$get_authorization_url->setRequestPrompt($prompt);
		$get_authorization_url->request();
		
		return $get_authorization_url->getResponseAuthorizationUrl();
	}
	
	/**
	 * Doing logout is something is wrong
	 */
	function gluu_sso_doing_logout($user_oxd_id_token, $session_states, $state)
	{
		@session_start();
		$base_url = gluu_sso_getbaseurl();
		$gluu_provider = variable_get('gluu_provider');
		$arrContextOptions = array(
			"ssl" => array(
				"verify_peer" => false,
				"verify_peer_name" => false,
			),
		);
		$json = file_get_contents($gluu_provider . '/.well-known/openid-configuration', false, stream_context_create($arrContextOptions));
		$obj = json_decode($json);
		
		$oxd_id = variable_get('gluu_oxd_id');
		$gluu_config = variable_get('gluu_config');
		if (!empty($obj->end_session_endpoint) or $gluu_provider == 'https://accounts.google.com') {
			$logout = new Gluu_sso_logout();
			$logout->setRequestOxdId($oxd_id);
			$logout->setRequestIdToken($user_oxd_id_token);
			$logout->setRequestPostLogoutRedirectUri($gluu_config['post_logout_redirect_uri']);
			$logout->setRequestSessionState($session_states);
			$logout->setRequestState($state);
			$logout->request();
			unset($_SESSION['user_oxd_access_token']);
			unset($_SESSION['user_oxd_id_token']);
			unset($_SESSION['session_states']);
			unset($_SESSION['state']);
			unset($_SESSION['session_in_op']);
			@session_destroy();
			
			return $logout->getResponseObject()->data->uri;
		}
		
		return $base_url;
	}
	
	/**
	 * Checking is oxd port working;
	 */
	function gluu_sso_is_port_working_module()
	{
		$config_option = variable_get('gluu_config');
		$connection = @fsockopen('127.0.0.1', $config_option['gluu_oxd_port']);
		if (is_resource($connection)) {
			fclose($connection);
			
			return true;
		} else {
			return false;
		}
	}
	
	/**
	 * Getting base url;
	 */
	function gluu_sso_getbaseurl()
	{
		// output: /myproject/index.php
		$currentPath = $_SERVER['PHP_SELF'];
		
		// output: Array ( [dirname] => /myproject [basename] => index.php [extension] => php [filename] => index )
		$pathInfo = pathinfo($currentPath);
		
		// output: localhost
		$hostName = $_SERVER['HTTP_HOST'];
		
		// output: http://
		$protocol = (!empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] !== 'off' || $_SERVER['SERVER_PORT'] == 443) ? "https://" : "http://";
		
		// return: http://localhost/myproject/
		if (strpos($pathInfo['dirname'], '\\') !== false) {
			return $protocol . $hostName . "/";
		} else {
			return $protocol . $hostName . $pathInfo['dirname'] . "/";
		}
	}